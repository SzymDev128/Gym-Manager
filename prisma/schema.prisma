datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Member {
  id           Int        @id @default(autoincrement())
  firstName    String
  lastName     String
  birthDate    DateTime?
  email        String     @unique
  phoneNumbers PhoneNumber[]
  joinDate     DateTime   @default(now())
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: NoAction)
  membershipId Int
  payments     Payment[]
  checkIns     CheckIn[]
}
model PhoneNumber {
  id       Int    @id @default(autoincrement())
  number   String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId Int
}

model Membership {
  id          Int       @id @default(autoincrement())
  name        String
  durationMonths Int
  price       Float
  members     Member[]
}

model Employee {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  hireDate  DateTime
  salary    Float
  trainer   Trainer?
  receptionist Receptionist?
}

model Trainer {
  id             Int      @id
  specialization String
  experienceYears Int
  supervisorId   Int?
  supervisor     Trainer? @relation("TrainerHierarchy", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates   Trainer[] @relation("TrainerHierarchy")
  classes        Class[]
  employee       Employee  @relation(fields: [id], references: [id], onDelete: Cascade)
}


model Receptionist {
  id        Int     @id
  shiftHours String
  employee Employee @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Class {
  id          Int     @id @default(autoincrement())
  name        String
  startTime   DateTime
  durationMin Int
  trainerId   Int?
  trainer     Trainer? @relation(fields: [trainerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model Equipment {
  id          Int     @id @default(autoincrement())
  name        String
  category    String
  condition   String
  purchaseDate DateTime
  maintenance Maintenance[]
}

model Maintenance {
  id          Int     @id @default(autoincrement())
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  date        DateTime
  cost        Float
  description String?
}

model Payment {
  id        Int     @id @default(autoincrement())
  memberId  Int
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  date      DateTime @default(now())
  amount    Float
  method    String
}

model CheckIn {
  id         Int     @id @default(autoincrement())
  memberId   Int
  member     Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  checkInTime DateTime @default(now())
}
